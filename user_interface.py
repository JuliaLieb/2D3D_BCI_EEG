# Form implementation generated from reading ui file 'UserInterface.ui'
#
# Created by: PyQt6 UI code generator 6.1.0
#
# WARNING: Any manual changes made to this file will be lost when pyuic6 is
# run again.  Do not edit this file unless you know what you are doing.

import sys
import os
from PyQt5 import QtCore, QtGui, QtWidgets
<<<<<<< HEAD:user_interface.py
import subprocess

from FeedbackModel import sequence_generator, bci_config, xdf_to_mat, compute_csp_lda
=======
import sequence_generator
import eeg_simulation
import feedback_model
import update_bci_config
import subprocess
import xdf_to_mat
import compute_csp_lda
>>>>>>> parent of 6a33a90 (GUI improvements):FeedbackModel/UserInterface.py

class Ui_UserInterface(object):
    """ -----------------------
    Button Events (Click)
    ------------------------"""

    def updateButtonClick(self):

        print("Check input settings...")
        subject_id = self.input_ID.value()
        total_runs = self.input_total_runs.value()
        tasks_per_run = self.input_tasks.value()
        n_run = self.input_run.value()
        n_session = self.input_session.value()
        if self.radio_FB_on.isChecked() == True:
            motor_mode = "MI"
        else:
            motor_mode = "ME"
        if self.radio_FB_on.isChecked() == True:
            fb_mode = "on"
        else:
            fb_mode = "off"
        if self.radio_ERDS_average.isChecked() == True:
            erds_mode = "average"
        else:
            erds_mode = "single"
        if self.radio_3D.isChecked() == True:
            dimension_mode = "3D"
        else:
            dimension_mode = "2D"

        update_bci_config.update_bci_config(subject_id, total_runs, tasks_per_run, n_run, n_session, motor_mode, fb_mode, erds_mode, dimension_mode)
        print("... bci-config.json is updated with input settings.")

<<<<<<< HEAD:user_interface.py
        total_runs = self.input_total_runs.value()
        tasks_per_run = int(self.input_tasks.value())
        sequence_generator.sequence_generator(tasks_per_run, total_runs)
        print("Sequence was generated.")

    def eeg_sim_button_click(self):
=======
    def generateSequenceButtonClick(self):
        print("Button for generate a sequence was clicked.")
        total_runs = self.input_total_runs.value()
        tasks_per_run = int(self.input_tasks.value()/2)  # number of trials per task (l + r)
        print(str(total_runs) + " runs and " + str(tasks_per_run) + " trials per task.")
        sequence_generator.sequence_generator(tasks_per_run, total_runs)
    def eegSimButtonClick(self):
>>>>>>> parent of 6a33a90 (GUI improvements):FeedbackModel/UserInterface.py
        print("EEG simulation is started...")
        cwd = os.getcwd()
        subprocess.Popen("python " + cwd + "/FeedbackModel/eeg_simulation.py")
        print("eeg_simulation is open.")


<<<<<<< HEAD:user_interface.py
    def stream_viewer_button_click(self):
        print("Open stream viewer...")
        subprocess.Popen("lsl_viewer.exe")
        print("Stream viewer is open.")


    def train_button_click(self):
=======
    def trainButtonClick(self):
>>>>>>> parent of 6a33a90 (GUI improvements):FeedbackModel/UserInterface.py
        print("Button for calculation of CSP & LDA clicked.")
         #hier sollte eigentlich xdf to mat und compute CSP LDA ausgef√ºhrt werden

    def openButtonClick(self):
        print("Button for opening Unity clicked.")
        cwd = os.getcwd()
        subprocess.Popen(cwd + "\\VRFeedback\\Game VR\\VR-neurofeedback.exe", cwd=cwd+"\\VRFeedback")
        print("Unity is open.")

    def LSLRecorderButtonClick(self):
        print("Button for opening LSL Recorder clicked.")
        cwd = os.getcwd()
<<<<<<< HEAD:user_interface.py
        lsl_rec_file = cwd + '/LabRecorder/LabRecorder.exe'
=======
        lsl_rec_file = cwd + '/../../LabRecorder/LabRecorder.exe'
>>>>>>> parent of 6a33a90 (GUI improvements):FeedbackModel/UserInterface.py
        subprocess.Popen(lsl_rec_file)
        print("LSL Recorder is open.")

    def startFBButtonClick(self):
        print("Start feedback model button clicked.")
        ID = self.input_ID.text()
        print("Subject ID: " + str(ID))
        N_sessions = self.input_session.value()
        print("Session number: " + str(N_sessions))
        N_runs = self.input_run.value()
        print("Run number: " + str(N_runs))
        if self.radio_FB_off.isChecked() == True:
            print("Feedback: off \nChange settings to start feedback.")
        else:
            print("Feedback: on \nFeedback is started...")
<<<<<<< HEAD:user_interface.py
            cwd = os.getcwd()
            subprocess.Popen("python " + cwd + "./FeedbackModel/feedback_model.py")
            print("feedback_model is open.")
            # feedback_model.feedback_model()
=======
            feedback_model.feedback_model()


    def runBCIButtonClick(self ):
        print("Button for starting session in unity clicked.")
>>>>>>> parent of 6a33a90 (GUI improvements):FeedbackModel/UserInterface.py

    def closeButtonClick(self):
        print("Close button clicked.")
        MainWindow.close()

    def calc_results_button_click(self):
        print("Results could be calculated here.")

    """ -----------------------
    User Interface Setup
    ------------------------"""

<<<<<<< HEAD:user_interface.py
    def setup_ui(self, main_window, current_config):
        main_window.setObjectName("main_window")
        main_window.resize(900, 750)
=======
    def setupUi(self, dialog):
        dialog.setObjectName("dialog")
        dialog.resize(850, 755)
>>>>>>> parent of 6a33a90 (GUI improvements):FeedbackModel/UserInterface.py

        """Title"""
        self.l_title = QtWidgets.QLabel(main_window)
        self.l_title.setGeometry(QtCore.QRect(20, 20, 801, 51))
        font = QtGui.QFont()
        font.setPointSize(14)
        self.l_title.setFont(font)
        self.l_title.setLayoutDirection(QtCore.Qt.LayoutDirection.RightToLeft)
        self.l_title.setAlignment(QtCore.Qt.AlignmentFlag.AlignCenter)
        self.l_title.setObjectName("l_title")

        """--------------Label Input--------------"""
        self.l_input = QtWidgets.QLabel(main_window)
        self.l_input.setGeometry(QtCore.QRect(160, 100, 71, 21))
        font = QtGui.QFont()
        font.setPointSize(10)
        font.setBold(True)
        font.setWeight(75)
        self.l_input.setFont(font)
        self.l_input.setObjectName("l_input")

        """Subject ID"""
<<<<<<< HEAD:user_interface.py
        current_subject_id = current_config['gui-input-settings']['subject-id']
        current_subject_id = re.sub(r'.', '', current_subject_id, count=1)
        self.input_id = QtWidgets.QSpinBox(main_window)
        self.input_id.setGeometry(QtCore.QRect(270, 160, 131, 31))
        self.input_id.setPrefix("S")
        self.input_id.setProperty("value", current_subject_id)
        self.input_id.setObjectName("input_ID")
        self.label_id = QtWidgets.QLabel(main_window)
        self.label_id.setGeometry(QtCore.QRect(60, 160, 171, 18))
        self.label_id.setObjectName("label_ID")

        """Total runs"""
        current_total_runs = current_config['gui-input-settings']['total-runs']
        self.label_total_runs = QtWidgets.QLabel(main_window)
        self.label_total_runs.setGeometry(QtCore.QRect(60, 210, 261, 18))
        self.label_total_runs.setObjectName("label_total_runs")
        self.input_total_runs = QtWidgets.QSpinBox(main_window)
        self.input_total_runs.setGeometry(QtCore.QRect(340, 210, 60, 24))
=======
        self.input_ID = QtWidgets.QSpinBox(dialog)
        self.input_ID.setGeometry(QtCore.QRect(200, 150, 131, 31))
        #self.input_ID.setPrefix("sub-P")
        self.input_ID.setProperty("value", 1)
        self.input_ID.setObjectName("input_ID")
        self.label_ID = QtWidgets.QLabel(dialog)
        self.label_ID.setGeometry(QtCore.QRect(60, 160, 131, 18))
        self.label_ID.setObjectName("label_ID")

        """Total runs"""
        self.label_total_runs = QtWidgets.QLabel(dialog)
        self.label_total_runs.setGeometry(QtCore.QRect(60, 210, 181, 18))
        self.label_total_runs.setObjectName("label_total_runs")
        self.input_total_runs = QtWidgets.QSpinBox(dialog)
        self.input_total_runs.setGeometry(QtCore.QRect(270, 210, 60, 24))
>>>>>>> parent of 6a33a90 (GUI improvements):FeedbackModel/UserInterface.py
        self.input_total_runs.setMinimum(2)
        self.input_total_runs.setObjectName("input_total_runs")

        """Trials per task"""
<<<<<<< HEAD:user_interface.py
        current_tasks = current_config['gui-input-settings']['n-per-task']
        self.label_task = QtWidgets.QLabel(main_window)
        self.label_task.setGeometry(QtCore.QRect(60, 250, 261, 18))
        self.label_task.setObjectName("label_task")
        self.input_tasks = QtWidgets.QSpinBox(main_window)
        self.input_tasks.setGeometry(QtCore.QRect(340, 250, 60, 24))
=======
        self.label_task = QtWidgets.QLabel(dialog)
        self.label_task.setGeometry(QtCore.QRect(60, 250, 181, 18))
        self.label_task.setObjectName("label_task")
        self.input_tasks = QtWidgets.QSpinBox(dialog)
        self.input_tasks.setGeometry(QtCore.QRect(270, 250, 60, 24))
>>>>>>> parent of 6a33a90 (GUI improvements):FeedbackModel/UserInterface.py
        self.input_tasks.setMinimum(1)
        self.input_tasks.setProperty("value", 10)
        self.input_tasks.setObjectName("input_tasks")

        """Session"""
<<<<<<< HEAD:user_interface.py
        current_session = current_config['gui-input-settings']['n-session']
        self.label_session = QtWidgets.QLabel(main_window)
        self.label_session.setGeometry(QtCore.QRect(60, 290, 261, 18))
        self.label_session.setObjectName("label_session")
        self.input_session = QtWidgets.QSpinBox(main_window)
        self.input_session.setGeometry(QtCore.QRect(340, 290, 60, 24))
=======
        self.label_session = QtWidgets.QLabel(dialog)
        self.label_session.setGeometry(QtCore.QRect(60, 290, 181, 18))
        self.label_session.setObjectName("label_session")
        self.input_session = QtWidgets.QSpinBox(dialog)
        self.input_session.setGeometry(QtCore.QRect(270, 290, 60, 24))
>>>>>>> parent of 6a33a90 (GUI improvements):FeedbackModel/UserInterface.py
        self.input_session.setMinimum(1)
        self.input_session.setObjectName("input_session")

        """Run"""
<<<<<<< HEAD:user_interface.py
        current_run = current_config['gui-input-settings']['n-run']
        self.label_run = QtWidgets.QLabel(main_window)
        self.label_run.setGeometry(QtCore.QRect(60, 330, 261, 18))
        self.label_run.setObjectName("label_run")
        self.input_run = QtWidgets.QSpinBox(main_window)
        self.input_run.setGeometry(QtCore.QRect(340, 330, 60, 24))
=======
        self.label_run = QtWidgets.QLabel(dialog)
        self.label_run.setGeometry(QtCore.QRect(60, 330, 181, 18))
        self.label_run.setObjectName("label_run")
        self.input_run = QtWidgets.QSpinBox(dialog)
        self.input_run.setGeometry(QtCore.QRect(270, 330, 60, 24))
>>>>>>> parent of 6a33a90 (GUI improvements):FeedbackModel/UserInterface.py
        self.input_run.setMinimum(1)
        self.input_run.setObjectName("input_run")

        """Radio Button: MI or ME"""
<<<<<<< HEAD:user_interface.py
        current_motor_mode = current_config['gui-input-settings']['motor-mode']
        self.radio_mi = QtWidgets.QRadioButton(main_window)
        self.radio_mi.setGeometry(QtCore.QRect(60, 410, 200, 22))
        self.radio_mi.setObjectName("radio_MI")
        self.goup_me_mi = QtWidgets.QButtonGroup(main_window)
        self.goup_me_mi.setObjectName("goup_ME_MI")
        self.goup_me_mi.addButton(self.radio_mi)
        self.radio_me = QtWidgets.QRadioButton(main_window)
        self.radio_me.setGeometry(QtCore.QRect(60, 440, 200, 22))
        self.radio_me.setObjectName("radio_ME")
        self.goup_me_mi.addButton(self.radio_me)
        if current_motor_mode == "MI":
            self.radio_mi.setChecked(True)
        else:
            self.radio_me.setChecked(True)

        """Radio Button: Feedback on or off"""
        current_fb_mode = current_config['gui-input-settings']['fb-mode']
        self.radio_fb_on = QtWidgets.QRadioButton(main_window)
        self.radio_fb_on.setGeometry(QtCore.QRect(60, 490, 200, 22))
        self.radio_fb_on.setObjectName("radio_FB_on")
        self.group_fb = QtWidgets.QButtonGroup(main_window)
        self.group_fb.setObjectName("group_FB")
        self.group_fb.addButton(self.radio_fb_on)
        self.radio_fb_off = QtWidgets.QRadioButton(main_window)
        self.radio_fb_off.setGeometry(QtCore.QRect(60, 520, 200, 22))
        self.radio_fb_off.setObjectName("radio_FB_off")
        self.group_fb.addButton(self.radio_fb_off)
        if current_fb_mode == "on":
            self.radio_fb_on.setChecked(True)
        else:
            self.radio_fb_off.setChecked(True)

        """Radio Button: ERDS single or average"""
        current_erds_mode = current_config['feedback-model-settings']['erds']['mode']
        self.radio_erds_single = QtWidgets.QRadioButton(main_window)
        self.radio_erds_single.setGeometry(QtCore.QRect(60, 570, 200, 22))
        self.radio_erds_single.setObjectName("radio_ERDS_single")
        self.group_erds = QtWidgets.QButtonGroup(main_window)
        self.group_erds.setObjectName("group_ERDS")
        self.group_erds.addButton(self.radio_erds_single)
        self.radio_erds_average = QtWidgets.QRadioButton(main_window)
        self.radio_erds_average.setGeometry(QtCore.QRect(60, 600, 200, 22))
        self.radio_erds_average.setChecked(True)
        self.radio_erds_average.setObjectName("radio_ERDS_average")
        self.group_erds.addButton(self.radio_erds_average)
        if current_erds_mode == "average":
            self.radio_erds_average.setChecked(True)
        else:
            self.radio_erds_single.setChecked(True)

        """Radio Button: 2D or 3D"""
        current_dimension_mode = current_config['gui-input-settings']['dimension-mode']
        self.radio_2d = QtWidgets.QRadioButton(main_window)
        self.radio_2d.setGeometry(QtCore.QRect(60, 650, 200, 22))
        self.radio_2d.setChecked(True)
        self.radio_2d.setObjectName("radio_2D")
        self.group_2d_3d = QtWidgets.QButtonGroup(main_window)
        self.group_2d_3d.setObjectName("group_2D_3D")
        self.group_2d_3d.addButton(self.radio_2d)
        self.radio_3d = QtWidgets.QRadioButton(main_window)
        self.radio_3d.setGeometry(QtCore.QRect(60, 680, 200, 22))
        self.radio_3d.setObjectName("radio_3D")
        self.group_2d_3d.addButton(self.radio_3d)
        if current_dimension_mode == "2D":
            self.radio_2d.setChecked(True)
        else:
            self.radio_3d.setChecked(True)
=======
        self.radio_MI = QtWidgets.QRadioButton(dialog)
        self.radio_MI.setGeometry(QtCore.QRect(60, 410, 200, 22))
        self.radio_MI.setChecked(True)
        self.radio_MI.setObjectName("radio_MI")
        self.goup_ME_MI = QtWidgets.QButtonGroup(dialog)
        self.goup_ME_MI.setObjectName("goup_ME_MI")
        self.goup_ME_MI.addButton(self.radio_MI)
        self.radio_ME = QtWidgets.QRadioButton(dialog)
        self.radio_ME.setGeometry(QtCore.QRect(60, 440, 200, 22))
        self.radio_ME.setObjectName("radio_ME")
        self.goup_ME_MI.addButton(self.radio_ME)

        """Radio Button: Feedback on or off"""
        self.radio_FB_on = QtWidgets.QRadioButton(dialog)
        self.radio_FB_on.setGeometry(QtCore.QRect(60, 490, 200, 22))
        self.radio_FB_on.setObjectName("radio_FB_on")
        self.group_FB = QtWidgets.QButtonGroup(dialog)
        self.group_FB.setObjectName("group_FB")
        self.group_FB.addButton(self.radio_FB_on)
        self.radio_FB_off = QtWidgets.QRadioButton(dialog)
        self.radio_FB_off.setGeometry(QtCore.QRect(60, 520, 200, 22))
        self.radio_FB_off.setChecked(True)
        self.radio_FB_off.setObjectName("radio_FB_off")
        self.group_FB.addButton(self.radio_FB_off)

        """Radio Button: ERDS single or average"""
        self.radio_ERDS_single = QtWidgets.QRadioButton(dialog)
        self.radio_ERDS_single.setGeometry(QtCore.QRect(60, 570, 200, 22))
        self.radio_ERDS_single.setObjectName("radio_ERDS_single")
        self.group_ERDS = QtWidgets.QButtonGroup(dialog)
        self.group_ERDS.setObjectName("group_ERDS")
        self.group_ERDS.addButton(self.radio_ERDS_single)
        self.radio_ERDS_average = QtWidgets.QRadioButton(dialog)
        self.radio_ERDS_average.setGeometry(QtCore.QRect(60, 600, 200, 22))
        self.radio_ERDS_average.setChecked(True)
        self.radio_ERDS_average.setObjectName("radio_ERDS_average")
        self.group_ERDS.addButton(self.radio_ERDS_average)

        """Radio Button: 2D or 3D"""
        self.radio_2D = QtWidgets.QRadioButton(dialog)
        self.radio_2D.setGeometry(QtCore.QRect(60, 650, 200, 22))
        self.radio_2D.setChecked(True)
        self.radio_2D.setObjectName("radio_2D")
        self.group_2D_3D = QtWidgets.QButtonGroup(dialog)
        self.group_2D_3D.setObjectName("group_2D_3D")
        self.group_2D_3D.addButton(self.radio_2D)
        self.radio_3D = QtWidgets.QRadioButton(dialog)
        self.radio_3D.setGeometry(QtCore.QRect(60, 680, 200, 22))
        self.radio_3D.setObjectName("radio_3D")
        self.group_2D_3D.addButton(self.radio_3D)
>>>>>>> parent of 6a33a90 (GUI improvements):FeedbackModel/UserInterface.py

        """Update settings button"""
        self.button_update_settings = QtWidgets.QPushButton(main_window)
        self.button_update_settings.setGeometry(QtCore.QRect(270, 680, 130, 32))
        self.button_update_settings.setObjectName("button_update_settings")
        self.button_update_settings.clicked.connect(self.updateButtonClick)  # button event

        """Separation line"""
<<<<<<< HEAD:user_interface.py
        self.line = QtWidgets.QFrame(main_window)
        self.line.setGeometry(QtCore.QRect(430, 100, 20, 621))
=======
        self.line = QtWidgets.QFrame(dialog)
        self.line.setGeometry(QtCore.QRect(370, 100, 20, 621))
>>>>>>> parent of 6a33a90 (GUI improvements):FeedbackModel/UserInterface.py
        self.line.setFrameShape(QtWidgets.QFrame.Shape.VLine)
        self.line.setFrameShadow(QtWidgets.QFrame.Shadow.Sunken)
        self.line.setObjectName("line")

        """--------------Label Actions--------------"""
<<<<<<< HEAD:user_interface.py
        self.l_actions = QtWidgets.QLabel(main_window)
        self.l_actions.setGeometry(QtCore.QRect(610, 90, 81, 21))
=======
        self.l_actions = QtWidgets.QLabel(dialog)
        self.l_actions.setGeometry(QtCore.QRect(470, 100, 81, 21))
>>>>>>> parent of 6a33a90 (GUI improvements):FeedbackModel/UserInterface.py
        font = QtGui.QFont()
        font.setPointSize(10)
        font.setBold(True)
        font.setWeight(75)
        self.l_actions.setFont(font)
        self.l_actions.setObjectName("l_actions")

        """Close button"""
        self.button_close = QtWidgets.QPushButton(main_window)
        self.button_close.setGeometry(QtCore.QRect(680, 680, 104, 32))
        self.button_close.setObjectName("button_close")
        self.button_close.clicked.connect(self.closeButtonClick)  # button event

<<<<<<< HEAD:user_interface.py
        """EEG simulation button"""
        self.button_eeg_sim = QtWidgets.QPushButton(main_window)
        self.button_eeg_sim.setGeometry(QtCore.QRect(570, 150, 160, 32))
        self.button_eeg_sim.setObjectName("button_EEG_sim")
        self.button_eeg_sim.clicked.connect(self.eeg_sim_button_click)  # button event

        """Opem stream viewer button"""
        self.button_stream_viewer = QtWidgets.QPushButton(main_window)
        self.button_stream_viewer.setGeometry(QtCore.QRect(570, 200, 160, 32))
        self.button_stream_viewer.setObjectName("button_LSL_check")
        self.button_stream_viewer.clicked.connect(self.stream_viewer_button_click)  # button event

        """Open BCI button"""
        self.button_open_bci = QtWidgets.QPushButton(main_window)
        self.button_open_bci.setGeometry(QtCore.QRect(570, 250, 160, 32))
        self.button_open_bci.setObjectName("button_open_BCI")
        self.button_open_bci.clicked.connect(self.open_button_click)  # button event

        """Start LSL recorder button"""
        self.button_lsl_recorder = QtWidgets.QPushButton(main_window)
        self.button_lsl_recorder.setGeometry(QtCore.QRect(570, 300, 160, 32))
        self.button_lsl_recorder.setObjectName("button_LSL_recorder")
        self.button_lsl_recorder.clicked.connect(self.lsl_recorder_button_click)  # button event

        """Start feedback button"""
        self.button_start_fb = QtWidgets.QPushButton(main_window)
        self.button_start_fb.setGeometry(QtCore.QRect(570, 350, 160, 32))
        self.button_start_fb.setObjectName("button_start_FB")
        self.button_start_fb.clicked.connect(self.start_fb_button_click)  # button event

        """Train classifier button"""
        self.button_train_classifier = QtWidgets.QPushButton(main_window)
        self.button_train_classifier.setGeometry(QtCore.QRect(570, 400, 160, 32))
        self.button_train_classifier.setObjectName("button_train_classifier")
        self.button_train_classifier.clicked.connect(self.train_button_click)  # button event

        """Calculate results button"""
        self.button_calc_results = QtWidgets.QPushButton(main_window)
        self.button_calc_results.setGeometry(QtCore.QRect(570, 500, 160, 32))
        self.button_calc_results.setObjectName("button_train_classifier")
        self.button_calc_results.clicked.connect(self.calc_results_button_click)  # button event

        self.retranslate_ui(main_window)
        QtCore.QMetaObject.connectSlotsByName(main_window)

    def retranslate_ui(self, main_window):
        _translate = QtCore.QCoreApplication.translate
        main_window.setWindowTitle(_translate("main_window", "BCI User Interface"))
        self.l_title.setText(_translate("main_window", "2D & 3D Visualization of Motor Tasks in EEG-Based BCI"))
        self.label_id.setText(_translate("main_window", "Subject ID:"))
        self.label_total_runs.setText(_translate("main_window", "Number of runs (total):"))
        self.label_task.setText(_translate("main_window", "Number of tasks per run (total):"))
        self.label_session.setText(_translate("main_window", "Current session number:"))
        self.label_run.setText(_translate("main_window", "Current run number:"))
        self.radio_mi.setText(_translate("main_window", "Motor imagery"))
        self.radio_me.setText(_translate("main_window", "Motor execution"))
        self.radio_fb_on.setText(_translate("main_window", "Feedback ON"))
        self.radio_fb_off.setText(_translate("main_window", "Feedback OFF"))
        self.radio_erds_single.setText(_translate("main_window", "ERDS: single channel"))
        self.radio_erds_average.setText(_translate("main_window", "ERDS: average channels"))
        self.l_input.setText(_translate("main_window", "Input"))
        self.l_actions.setText(_translate("main_window", "Actions"))
        self.button_close.setText(_translate("main_window", "Close"))
        self.button_eeg_sim.setText(_translate("main_window", "EEG Simulation"))
        self.button_stream_viewer.setText(_translate("main_window", "Open Stream Viewer"))
        self.button_open_bci.setText(_translate("main_window", "Open Unity Game"))
        self.button_lsl_recorder.setText(_translate("main_window", "Open Lab Recorder"))
        self.button_train_classifier.setText(_translate("main_window", "Train Classifier"))
        self.button_calc_results.setText(_translate("main_window", "Calculate Results"))
        self.button_start_fb.setText(_translate("main_window", "Start Feedback Model"))
        self.radio_2d.setText(_translate("main_window", "2D"))
        self.radio_3d.setText(_translate("main_window", "3D"))
        self.button_update_settings.setText(_translate("main_window", "Update Settings"))
=======
        """Generate sequence button"""
        self.button_generate_sequence = QtWidgets.QPushButton(dialog)
        self.button_generate_sequence.setGeometry(QtCore.QRect(430, 150, 161, 32))
        self.button_generate_sequence.setObjectName("button_generate_sequence")
        self.button_generate_sequence.clicked.connect(self.generateSequenceButtonClick) #button event

        """EEG simulation button"""
        self.button_EEG_sim = QtWidgets.QPushButton(dialog)
        self.button_EEG_sim.setGeometry(QtCore.QRect(430, 200, 161, 32))
        self.button_EEG_sim.setObjectName("button_EEG_sim")
        self.button_EEG_sim.clicked.connect(self.eegSimButtonClick)  # button event

        """Check LSL stream button"""
        self.button_LSL_check = QtWidgets.QPushButton(dialog)
        self.button_LSL_check.setGeometry(QtCore.QRect(430, 250, 161, 32))
        self.button_LSL_check.setObjectName("button_LSL_check")

        """Open BCI button"""
        self.button_open_BCI = QtWidgets.QPushButton(dialog)
        self.button_open_BCI.setGeometry(QtCore.QRect(430, 300, 161, 32))
        self.button_open_BCI.setObjectName("button_open_BCI")
        self.button_open_BCI.clicked.connect(self.openButtonClick)  # button event

        """Start LSL recorder button"""
        self.button_LSL_recorder = QtWidgets.QPushButton(dialog)
        self.button_LSL_recorder.setGeometry(QtCore.QRect(430, 350, 161, 32))
        self.button_LSL_recorder.setObjectName("button_LSL_recorder")
        self.button_LSL_recorder.clicked.connect(self.LSLRecorderButtonClick)  # button event

        """Start feedback button and label"""
        self.button_start_FB = QtWidgets.QPushButton(dialog)
        self.button_start_FB.setGeometry(QtCore.QRect(430, 400, 161, 32))
        self.button_start_FB.setObjectName("button_start_FB")
        self.button_start_FB.clicked.connect(self.startFBButtonClick)  # button event
        self.comment_FB = QtWidgets.QLabel(dialog)
        self.comment_FB.setGeometry(QtCore.QRect(600, 400, 211, 30))
        self.comment_FB.setObjectName("label")

        """Run BCI game button"""
        self.button_run_BCI = QtWidgets.QPushButton(dialog)
        self.button_run_BCI.setGeometry(QtCore.QRect(430, 450, 161, 32))
        self.button_run_BCI.setObjectName("button_run_BCI")
        self.button_run_BCI.clicked.connect(self.runBCIButtonClick)  # button event

        """Train classifier button and label"""
        self.button_train_classifier = QtWidgets.QPushButton(dialog)
        self.button_train_classifier.setGeometry(QtCore.QRect(430, 500, 161, 32))
        self.button_train_classifier.setObjectName("button_train_classifier")
        self.button_train_classifier.clicked.connect(self.trainButtonClick)  # button event
        self.comment_train = QtWidgets.QLabel(dialog)
        self.comment_train.setGeometry(QtCore.QRect(600, 500, 211, 30))
        self.comment_train.setObjectName("comment_train")

        self.retranslateUi(dialog)
        QtCore.QMetaObject.connectSlotsByName(dialog)

    def retranslateUi(self, dialog):
        _translate = QtCore.QCoreApplication.translate
        dialog.setWindowTitle(_translate("dialog", "BCI User Interface"))
        self.l_title.setText(_translate("dialog", "EEG-Based BCI Study on 2D & 3D Feedback"))
        self.label_ID.setText(_translate("dialog", "Subject ID:"))
        self.label_total_runs.setText(_translate("dialog", "Number of runs (total):"))
        self.label_task.setText(_translate("dialog", "Number of tasks per run:"))
        self.label_session.setText(_translate("dialog", "Current session number:"))
        self.label_run.setText(_translate("dialog", "Current run number:"))
        self.radio_MI.setText(_translate("dialog", "Motor imagery"))
        self.radio_ME.setText(_translate("dialog", "Motor execution"))
        self.radio_FB_on.setText(_translate("dialog", "Feedback ON"))
        self.radio_FB_off.setText(_translate("dialog", "Feedback OFF"))
        self.radio_ERDS_single.setText(_translate("dialog", "ERDS: single channel"))
        self.radio_ERDS_average.setText(_translate("dialog", "ERDS: average channels"))
        self.l_input.setText(_translate("dialog", "Input"))
        self.l_actions.setText(_translate("dialog", "Actions"))
        self.button_close.setText(_translate("dialog", "Close"))
        self.button_generate_sequence.setText(_translate("dialog", "Generate sequence"))
        self.button_EEG_sim.setText(_translate("dialog", "EEG Simulation"))
        self.button_LSL_check.setText(_translate("dialog", "Check LSL Stream"))
        self.button_open_BCI.setText(_translate("dialog", "Open BCI Game"))
        self.button_LSL_recorder.setText(_translate("dialog", "Open LSL Recorder"))
        self.button_run_BCI.setText(_translate("dialog", "Run BCI Game"))
        self.button_train_classifier.setText(_translate("dialog", "Train Classifier"))
        self.button_start_FB.setText(_translate("dialog", "Start Feedback Model"))
        self.comment_FB.setText(_translate("dialog", "only for runs with feedback"))
        self.comment_train.setText(_translate("dialog", "only for runs to train classifier"))
        self.radio_2D.setText(_translate("dialog", "2D"))
        self.radio_3D.setText(_translate("dialog", "3D"))
        self.button_update_settings.setText(_translate("dialog", "Update Settings"))
>>>>>>> parent of 6a33a90 (GUI improvements):FeedbackModel/UserInterface.py

if __name__ == "__main__":
    app = QtWidgets.QApplication(sys.argv)
<<<<<<< HEAD:user_interface.py
    MainWindow = QtWidgets.QDialog()
    ui = UiUserInterface()
    ui.setup_ui(MainWindow, current_config)
    MainWindow.show()
    sys.exit(app.exec_())
    
=======
    Dialog = QtWidgets.QDialog()
    ui = Ui_UserInterface()
    ui.setupUi(Dialog)
    Dialog.show()
    sys.exit(app.exec_())
>>>>>>> parent of 6a33a90 (GUI improvements):FeedbackModel/UserInterface.py
